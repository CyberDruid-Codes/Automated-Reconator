#!/usr/bin/env python3.8

##
#import section 
from nmapclass import nmapScan
from tkinter import *
from tkinter import ttk
import tkinter as tk
import threading
from reportclass import report_class
from cyberbotcall import callortrain
from mitre_visualization import mitre_graph
from mitrecheck import mitre
import os
##

#Class from which all the scans and interpretations are made
class MainCyberClass():
    def __init__(self):
        #
        self.deepl_included = False
        self.vulners_included = False

        #Submit Method, takes the input (IP) and starts the scans/Checks (An on-click process, once submit is clicked)
        def ip_submit(ipentry):

            #calls the nmap class and returns the four variables needed to be displayed / Parsed to other classes
            try:
                #calls nmap scan and checks method. Parses the IP input and the boolean value(which does/n't start the Vulners check)
                nmapResults = nmapScan(ipentry,self.vulners_included)
                #result 1, open ports found - for the window display
                openportsinfo = nmapResults[0]
                #result 2, detailed scan results - for the Report
                display_str = nmapResults[1]
                #result 3, cve resuts - for the Report
                cvereport = nmapResults[2]
                #result 4, Raw nmap scan results- For the Report
                raw_scan = nmapResults[3]
                #result 5, vulnerability scan results - For the Report
                vuln_results = nmapResults[4]
                #result 6, boolean result - for the MITRE ATT&CK check
                vuln_found = nmapResults[5]
                #result 7, boolean result - for the MITRE ATT&CK check
                prod_found = nmapResults[6]

            #Returns user to the main page and prints error, this is a scan error(Usual with a wrong ip input or host not accessible)
            except Exception as e: 
                print(e)
                clear(False,True,False,False)
                MainPage(False, False)
                return

            #concatenates the results to be saved in a file 
            scanresults = display_str + openportsinfo

            #creates a file with the results of the scan (Raw version)
            nmapfile = open("NmapScan.txt", "w")
            nmapfile.write(raw_scan)
            nmapfile.close()
    
            #creates a file with the results of the scan (Formatted and indented version)
            displayfile = open("FormattedScan.txt", "w")
            displayfile.write(scanresults)
            displayfile.close()

            #Deep Learning Algorithm call
            #Calls it only when the global rule is true. This checks if the user has enabled the option. 
            if self.deepl_included == True:
                callortrain(True)
            else:
               cyber_report = open("cyberbotreport.txt", "w")
               cyber_report.write("The Deep Learning Module is not enabled. No results available.")
               cyber_report.close()

            #Calls the Mitre method and checks for techniques/mitigations based on the results of the previous checks/scans  
            Mitre_result = mitre(vuln_found, True, prod_found, True)
            report_mitre = Mitre_result[0]
            mitre_techniques = Mitre_result[1]
            mitre_subtechniques = Mitre_result[2]

            #Creates a graph based on the techniques and subtechniques found in the mitre ATT&CK method
            mitre_graph(mitre_techniques,mitre_subtechniques)

            #report_class calls the report generator class and formats the results in a readable format
            report_class(ipentry,cvereport,vuln_results,report_mitre)

            
            #calls Second Page with the quick results
            SecondPage(openportsinfo)
            clear(False,True,False,False)
            return


        def threads(entry):
            #creates a second thread for the scan, while keeping the screen interactive
            t2 = threading.Thread(target= ip_submit, args=(entry,))
            t2.daemon = True
            t2.start()

            #clears the Main Page
            clear(True,False,False,False)
            #calls the Loading Page Method
            FirstPage()

    


        #creates a Tkinter instance 
        self.Rootwindow = tk.Tk()

        #sets title of the window
        self.Rootwindow.title("Automated Reconator")

        #creates a canvas
        self.canvas =tk.Canvas(self.Rootwindow, width=800, height=800, bg='black')
        self.canvas.pack()

        #creates a frame ( a container ) of the first half of the page
        self.frameI =tk.Frame(self.Rootwindow, bg='black')
        self.frameI.place(relwidth=1, relheight=0.4)

        #creates a frame ( a container ) of the second half of the page
        self.lower_frame = tk.Frame(self.Rootwindow, bg='black') #bd = 5
        self.lower_frame.place(relx=0.5,rely=0.4,relwidth=1, relheight=1,anchor='n') # relwidth=0.75, relheight=0.4,

        #Question Page, Vulners and Deep Learning
        def QuestionsPage():

                #Title of the page
                self.title0 = tk.Label(self.frameI, text="Before starting, Would you like to include the following: (Requires extra setup)", bg='black', fg='white')
                self.title0.place(relx=0,rely=0, relwidth=1,relheight=0.3)
                #Deep Learning Question, which includes two Boolean buttons(Yes/No)
                self.title1 = tk.Label(self.frameI, text="Deep Learning Interpretation", bg='black', fg='white')
                self.title1.place(relx=0.1,rely=0.4, relwidth=0.4, relheight=0.3)

                #Vulners DB Question, which includes two Boolean buttons(Yes/No)
                self.title3 = tk.Label(self.frameI, text="Vulners DB Search", bg='black', fg='white')
                self.title3.place(relx=0.5,rely=0.4, relwidth=0.4, relheight=0.3)

                #creates a yes button for the deep learning algorithm
                self.yesbutton_deepl = tk.Button(self.frameI, text="Yes", bg='gray', command=lambda:extra_feature_deepl(True))
                self.yesbutton_deepl.place(relx=0.1,rely=0.7, relwidth=0.2, relheight=0.2)

                #creates a No button for the deep learning algorithm
                self.nobutton_deepl = tk.Button(self.frameI, text="No", bg='gray', command=lambda:extra_feature_deepl(False))
                self.nobutton_deepl.place(relx=0.3,rely=0.7, relwidth=0.2, relheight=0.2)

                #creates a yes button for the vulners
                self.yesbutton_vulners = tk.Button(self.frameI, text="Yes", bg='gray', command=lambda:extra_feature_vulners(True))
                self.yesbutton_vulners.place(relx=0.5,rely=0.7, relwidth=0.2, relheight=0.2)

                #creates a No button for the vulners
                self.nobutton_vulners = tk.Button(self.frameI, text="No", bg='gray', command=lambda:extra_feature_vulners(False))
                self.nobutton_vulners.place(relx=0.7,rely=0.7, relwidth=0.2, relheight=0.2)

                #creates a OK button, which redirects to the start page
                self.okbutton = tk.Button(self.lower_frame, text="OK", bg='gray', command=lambda:MainPage(False, True))
                self.okbutton.place(relx=0.4,rely=0.1, relwidth=0.2, relheight=0.1)

                #Notify about choosing the Yes options
                desc_attention = "~~~~Mention~~~~" + "\n \n" + "Choosing the Yes option without setup might make the script fail."+"\n \n"+ "Read the instructions beforehand, if you want to include the options in the Search."
                self.desclabel0 = tk.Label(self.lower_frame, text=desc_attention, bg='black', fg='white')
                self.desclabel0.place(relx=0,rely=0.2, relwidth=1,relheight=0.5)

        # Function on setting if the deeplearning module is included
        def extra_feature_deepl(value):
            if value == True:
                #global deepl_included
                self.deepl_included = True
        # Function on setting if the vulnersdb is included
        def extra_feature_vulners(value):
            if value == True:
                #global vulners_included
                self.vulners_included = True

        #First Page Method
        def MainPage(returninguser, startpage):
                
                #creates an if statement that calls the method only when the user presses to input another ip 
                if returninguser == True:
                    clear(False,False,True,False)
                elif startpage == True:
                    clear(False,False,False,True)

                #Sets the title of the page
                self.labelI = tk.Label(self.frameI, text="Input the Environment IP here:", bg='black', fg='white')
                self.labelI.place(relx=0,rely=0, relwidth=1,relheight=0.3)

                #Creates an entry bar
                self.entryI = tk.Entry(self.frameI, bg='gray')
                self.entryI.place(relx=0,rely=0.4, relwidth=1, relheight=0.3)

                #creates a button and on click, calls the threads function so that the screen does not freeze
                self.ipbutton = tk.Button(self.frameI, text="Submit", bg='gray', command=lambda:threads(self.entryI.get()))
                self.ipbutton.place(relx=0.4,rely=0.8, relwidth=0.2, relheight=0.2)

                #Creates a description label 
                desc_text = "Tool Description" + "\n \n" + "This tool is a Reconnaissance assistance tool that helps Cybersecurity Proffesionals get an understanding of the environment at the click of a button."+"\n \n \n"+ "Currently, the tool includes the following checks: " + "\n \n" + "1. NMAP Network scan" + "\n" + "2.Vulnerability Search using Vulners Database" + "\n" + "3. Custom CVE Check for the top 10 most used CVE's" + "\n" + "4.Network Scan Results Interpretation using Deep Learning" + "\n" + "5.MITRE ATT&CK Framework check for Techniques/Subtechniques and Possible Mitigations" + "\n \n" + "How to use the tool" + "\n \n" + "Input the environment ip in the Input box -> Click submit ->" + "\n" +" -> Wait 5-10 minutes -> Observe the Quick scan dashboard ->" + "\n" + "-> See the Automatically generated, in-depth, Report in a PDF format." + "\n \n" + "DISCLAIMER: " + "\n" + "The Usage of the tool for attacking targets without prior mutual consent is illegal." + "\n" + "It is the end user’s responsibility to obey all applicable local, state and federal laws."
                self.desclabel = tk.Label(self.lower_frame, text=desc_text, bg='black', fg='white')
                self.desclabel.place(relx=0,rely=0.1, relwidth=1,relheight=0.5)


        #Loading Page Method           
        def FirstPage():
                
                #Sets the title of the page
                self.labelII = tk.Label(self.frameI, text="Input the Environment IP here:", bg='black', fg='white')
                self.labelII.place(relx=0,rely=0, relwidth=1,relheight=0.3)

                #sets an entry bar
                self.entryII = tk.Entry(self.frameI, bg='gray')
                self.entryII.place(relx=0,rely=0.4, relwidth=1, relheight=0.3)

                #creates a button and on click
                self.pgOneButton = tk.Button(self.frameI, text="Cancel", bg='gray')
                self.pgOneButton.place(relx=0.4,rely=0.8, relwidth=0.2, relheight=0.2)

                #Creates a label with the scan being started
                self.labelIII = tk.Label(self.lower_frame, text="Please wait, the scan has started. This can take 5-10 minutes...", bg='black', fg='white', anchor='nw')
                self.labelIII.place(relx=0.28,rely=0.45,relwidth=0.75,relheight=0.75)

                #creating a progress bar to keep track of the status of the scan
                self.progress_bar = ttk.Progressbar(self.lower_frame, orient = HORIZONTAL,length = 100, mode = 'indeterminate') 
                self.progress_bar.place(relx=0.1,rely=0.4,relwidth=0.75,relheight=0.04)
                self.progress_bar.start(20)


        #Second Page Method
        def SecondPage(display_info):
                #global labelIV , pgTwoButton , nmapLabel
                #Sets the title of the second page
                self.labelIV = tk.Label(self.frameI, text="Quick Scan Results:", bg='black', fg='white')
                self.labelIV.place(relx=0,rely=0, relwidth=1,relheight=0.2)

                #Button that opens the PDF file on Click
                self.pgTwoButton = tk.Button(self.lower_frame, text="Full Report Results", bg='gray', command=lambda:os.startfile("Report.pdf"))
                self.pgTwoButton.place(relx=0.35,rely=0.1, relwidth=0.3, relheight=0.1)

                #Button that returns the user to the main screen
                self.pgThreeButton = tk.Button(self.lower_frame, text="Input another IP", bg='gray', command=lambda:MainPage(True, False))
                self.pgThreeButton.place(relx=0.35,rely=0.3, relwidth=0.3, relheight=0.1)

                #Creates the output box
                self.nmapLabel = tk.Label(self.frameI, anchor='n',justify='left',bd=4) 
                self.nmapLabel.place(relx=0.1,rely=0.2,relwidth=0.8,relheight=0.8)

                #Displays the result in the application output box
                self.nmapLabel['text'] ='\n' + display_info

        #clears the previous screen widgets before displaying the next
        def clear(firstpage,secondpage,thirdpage,startpage):
            if firstpage == True:
                self.labelI.destroy()
                self.desclabel.destroy()
                self.entryI.destroy()
                self.ipbutton.destroy()
            elif secondpage == True:
                self.entryII.destroy()
                self.labelII.destroy()
                self.labelIII.destroy()
                self.pgOneButton.destroy()
                self.progress_bar.destroy()
            elif thirdpage == True:
                 self.labelIV.destroy()
                 self.pgTwoButton.destroy()
                 self.nmapLabel.destroy()
                 self.pgThreeButton.destroy()
            elif startpage == True: 
                self.title0.destroy()
                self.title1.destroy()
                self.title3.destroy()
                self.yesbutton_deepl.destroy()
                self.nobutton_deepl.destroy()
                self.yesbutton_vulners.destroy()
                self.nobutton_vulners.destroy()
                self.okbutton.destroy()
                self.desclabel0.destroy()

        #Calls the Main Page GUI method
        QuestionsPage()

        #creates a loop for the application GUI
        self.Rootwindow.mainloop()

MainCyberClass()
